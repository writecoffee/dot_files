(equal t 3)
(equal 't 3)
exit
(defvar column-enum-list '(`CREATIVE_ID                           `AD_GROUP_HAS_CREATIVE_ID                           `ADVERTISER_MARKET_ID                           `CONTENT))
(pcase (symbol-name `CREATIVE) (`CREATIVE 1) (_ 3))
(pcase (symbol-name `CREATIVE) (CREATIVE 1) (_ 3))
column-enum-lsit
column-enum-list
(print column-enum-list)
(reduce (lambda (acc symbol) (princ symbol)) column-enum-list :initial-value nil)
(reduce (lambda (acc symbol) (cons symbol acc)) column-enum-list :initial-value nil)
(reduce (lambda (acc symbol) (cons (symbol-name symbol) acc)) column-enum-list :initial-value nil)
(symbol-name (car  column-enum-list))
(symbol-name 'CDCC)
(symbol-name `CDCC)
(defvar cccccc '(CCC AAA))
(car ccccc)
(car cccccc)
(symbol-name (car cccccc))
(pcase (car cccccc) (CCC "goood") (_ "hi"))
(replace-regexp-in-sring "\d+" "hd" "324234")
(replace-regexp-in-srring "\d+" "hd" "324234")
(replace-regexp-in-string "\d+" "hd" "324234")
(replace-regexp-in-string "\n+" "hd" "324234")
(replace-regexp-in-string "\n" "hd" "324234")
(replace-regexp-in-string "\n" "hd" "32423sdfs4")
(replace-regexp-in-string "32" "hd" "32423sdfs4")
(replace-regexp-in-string "\d" "hd" "32423sdfs4")
(replace-regexp-in-string "[0-9]+" "hd" "32423sdfs4")
(replace-regexp-in-string "[0-9]+" "hd" "32422423443434")
(defun replace-digits-by-subscript3 (string)  (replace-regexp-in-string "[0-9]"    (lambda (v) (format "%c" (+ (string-to-number v) 8320))) string) )
(replace-digits-by-subscript3 "35234")
(replace-digits-by-subscript3 "35234")
(defun replace-digits-by-subscript3 (string)  (replace-regexp-in-string "[0-9]"    (lambda (v) (format "%c" (1+ (string-to-number v)))) string) )
(replace-digits-by-subscript3 "35234")
SHI
(princ 'string)
(intern "some")
(symbol-name (intern "some"))
(pcase (intern "some") ('some 33) (_ 99))
(pcase (intern "some") (`some 33) (_ 99))
(intern isdf)
(intern `dlfjsdlf)
(list LIHI)
(defvar jjj '(LIS))
(princ jjj)
(princ (car jjj))
(symbol-name (car jjj))
(append nil (list "hi"))
(cl--do-pretty-print '("HELLO"))
(cl--do-prettyprint '("HELLO"))
(cl--do-prettyprint (list "HELLO"))
(cl--do-prettyprint "HELLO" "good")
(cl--do-prettyprint (cons "hello" "hi"))
(defun print-list (list-elements &optional delimeter)  "Print a list of elements with delimeter."  (let ((delim (if delimeter delimeter " ")))    (pcase list-elements      (nil (print))      (`(head nil) (prog (princ head)                         (print)))      (`(head mid remaining) (prog (princ head)                                   (princ delim)                                   (print-list remaining delim))))))
(print-list (list "hi" "good"))
(defun print-list (list-elements &optional delim)  "Print a list of elements with delimeter."    (pcase list-elements      (`(,head ,mid . ,remaining) (progn (princ head)                                         (princ delim)                                         (print-list (cons mid remaining) delim)))      (`(,head . nil) (progn (princ head)                             (princ "\n")))      (`(nil) 3)))
(print-list (list 3 4 55))
(print-list (list 3 4 55) " ")
(> most-positive-fixnum (* 8 195418249))
Welcome to the shell

(+ 24243 342119 381661 367249)
(setq a ["abc" "a"])
(nth 0 a)
a
(elt a 0)
(defun encrypt-id (id)  (lexical-let* ((magic (vconcat "3go8&$8*3*3h0k(2)2"))                 (song-bytes (vconcat id))                 (magic-len (length magic))                 (magic-song-bytes (reduce (lambda (magic-id current-byte)                                             (lexical-let ((i (length magic-id)))                                               (append magic-id                                                       (list (logxor (elt magic (mod i magic-len))                                                                     current-byte)))))                                           song-bytes                                           :initial-value nil)))    (concat magic-song-bytes)))
(length (vconcat (base64-encode-string (md5 (encrypt-id "hi")))))
(base64-encode-string (md5 (encrypt-id "hi")))
(base64-decode (base64-encode-string (md5 (encrypt-id "hi"))))
(base64-decode-string (base64-encode-string (md5 (encrypt-id "hi"))))
(princ (base64-encode-string (md5 (encrypt-id "hi"))))
(base64-encode-string "hi")
(base64-encode-string (md5 "hi"))
(md5 "hi")
(md5 (base64-encode-string "hi"))
(base64-encode-string (md5 "hi"))
(md5 "hi")
(length (md5 "hi"))
(md5 "hi" nil nil 'binary nil)
(md5 "hi" nil nil 'base64-binary-coding-system nil)
(md5 "hi" nil nil 'base64 nil)
(md5 "hi" nil nil 'utf-8 nil)
(base64-encode-string (md5 (encrypt-id "hi")))
(length (base64-encode-string (md5 (encrypt-id "hi"))))
(vconcat "hi")
(nth 0 "hi")
(string-to-list "hi")
(print (string-to-list "hi"))
(print (car (string-to-list "hi")))
(string-to-vector "hi")
(aref "hi" 0)
(char-to-string 104)
(concat "" nil)
(concat nil "hi")
(aref "hi" 3)
(aref "hi" 3)
(aref "hi" 1)
(cl-loop for i from 0 upto 2 do (print i))
(cl-loop for i from 0 to 2 do (print i))
(cl-loop for i from 0 below 2 do (print i))
(concat nil nil)
(append nil nil)
(append nil 3)
(append 9 3)
(append '(9) '(3))
(vconcat "hi")
(concat (vconcat "hi"))
(concat '(hi) (vconcat "hi"))
(concat '("hi") (vconcat "hi"))
(concat '("hi") (vconcat "hi"))
(concat (vconcat "hi") (vconcat "hihi"))
(concat (vconcat "hi") '("hihi"))
(concat (vconcat "\0") '("\0\0"))
(concat (vconcat "\0"))
(print "\0")
(vconcat "\0")
(length (vconcat "hi"))
(nth 0 (vconcat "hi"))
(concat (vconcat "hi"))
(lsh 255 -1)
(- 3)
(substring "hi" 0 2)
(substring "hi" 0 -1)
(replace-string "hi" "i")
(split-string "do foo is foobared" "fo+")
(url-hexify-string "lady gaga")
