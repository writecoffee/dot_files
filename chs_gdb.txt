
Tsu's GDB Cheatsheet


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

START-UP

-- File listing GDB commands to perform. Good for automating set-up.

   $ gdb BIN --command=COMMAND_FILE
   $ gdb BIN -x COMMAND_FILE

-- Run GDB using specified directory as the current working directory.

   $ gdb --cd=DIR

-- Read symbol table from file.

   $ gdb --symbols=SYM_FILE
   $ gdb -s SYM_FILE

-- Specify device for running program's standard input and output.

   $ gdb --tty=DEVICE

-- Specify process ID number to attach to.

   $ gdb --pid=PROCESS_ID 
   $ gdb -p PROCESS_ID
   $ gdb -c PROCESS_ID

-- Do not print the introductory and copyright messages.

   $ gdb --quiet

-- Run in batch (not interactive) mode. Execute commands from file. 

   $ gdb --batch -x COMMAND_FILE


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

PROCESS

-- Debug with multiple processes

   (gdb) set follow-fork-mode [parent|child|ask]
   (gdb) show follow-fork-mode

   or 

   $ gdb name-of-executable
   $ gdb -e name-of-executable -c name-of-core-file
   $ gdb name-of-executable -pid process-id 

-- List process identifiers
   $ ps -auxw

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

ASSEMBLY

-- Show tracable disassembled binary file (even without -g flag when compiling).

   (gdb) start
   (gdb) layout asm

-- Set breakpoint at specific function, e.g., sum; and then play with it.

   (gdb) break sum
   (gdb) break *0x80483c3
   (gdb) disable 1
   (gdb) enable 1
   (gdb) clear sum
   (gdb) si
   (gdb) ...
   (gdb) ni
   (gdb) until 1
   (gdb) call sum(1, 2)

-- Examine code

   (gdb) disas
   (gdb) disas sum
   (gdb) disas 0x80483b7
   (gdb) disas 0x80483b7 0x80483c7
   (gdb) print /x $rip
   (gdb) print /d $rip
   (gdb) print /t $rip

-- Examine data: examine address in $rsp, print as offset from previous global symbol.

   (gdb) x/a $rsp

-- Examine data: examine a string stored at 0xbffff890

   (gdb) x/s 0xbffff890

-- Examine data: examine first 10 instructions of function sum

   (gdb) x/10i sum

-- Examine data: examine first 10 opcode bytes of function sum

   (gdb) x/10b sum

-- Examine data: miscallenous

   (gdb) print /x $rax
   (gdb) print /d $rax
   (gdb) print /t $rax
   (gdb) print /d (int)$rax
   (gdb) print *(int *) 0xbffff890
   (gdb) print *(int *) ($rsp + 8)
   (gdb) print (char *) 0xbfff890
   (gdb) x/w 0xbffff890


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

RESTORE THE STACK

If calling stack was corrupted, gdb would not be able to interpret the return address
of functions, and hence we can not expand the calling stack in gdb. However, sometimes
the calling stack is just partically damaged, RSP is still storing the return address,
we can manually restore it.

   (gdb) set logging on
   (gdb) x /2000a $rsp

   0x426cb890: 0x0 0x4
   0x426cb8a0: 0x426cb8c0 0x100
   0x426cb8b0: 0x3e8 0x552f59 <_ZN5tbnet16EPollSocketEvent9getEventsEiPNS_7IOEventEi+41>
   0x426cb8c0: 0x1823c8a000000011 0x0
   0x426cb8d0: 0x0 0x0
   0x426cb8e0: 0x0 0x0
   ...

Symbols like <_ZN5tbnet16EPollSocketEvent9getEventsEiPNS_7IOEventEi+41> look valid for 
restoring calling stack before core dump.

Be careful about situations where (1) binary is out-of-date; (2) ulimit is too small, core
dump info is incomplete.

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

EXECUTE USER SCRIPT

define dumpGetParam
set $cell_list = ($arg0)
set $cell_num = ($arg1)
set $cell_idx = (0)
while ($cell_idx < $cell_num)
  printf "cell_idx:%d, table_id:%llu, column_id:%llu\\n", $cell_idx,
    $cell_list[$cell_idx].table_id_, $cell_list[$cell_idx].column_id
  set $cell_idx = $cell_idx + 1
end
end

The first argument $arg0 is the address of cell array, the second argument $arg1 is the
size of the array, the functionality is to print all info regarding "cell".

After in gdb we "source" the script from plain text file, we can use user command
"dumpGetParam".
